
R version 4.2.1 (2022-06-23) -- "Funny-Looking Kid"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("IS_trendf_functions_Pereyra.R")

Attaching package: ‘expm’

The following object is masked from ‘package:Matrix’:

    expm

Loading required package: iterators
Loading required package: parallel
> load("covmat.Rdata")
> load("MC_pcm.Rdata")
> 
> iter_bark <- 1e5
> lamb_coeff <- 0.001
> D_mat <- getD(k=1, n=1e2, x)   #  D matrix
> 
> output_bark <- list()
> 
> parallel::detectCores()
[1] 8
> num_cores <- parallel::detectCores() - 1
> doParallel::registerDoParallel(cores = num_cores)
> 
> 
> output_bark <- foreach(b = 1:num_cores) %dopar% {
+ pxbark <- px.barker(y, alpha_hat,sigma2_hat,k=1, grid=x,iter = iter_bark,delta = 0.08,
+                   covmat = covmat)
+ mybark <- mybarker(y, alpha_hat,sigma2_hat,k=1, grid=x,iter = iter_bark,delta = 0.08,
+                    covmat = covmat)
+ 
+ bark_chain <- mybark[[1]]
+ weights <- mybark[[2]]
+ pxbark_chain <- pxbark[[1]]
+ is_samp <- matrix(unlist(bark_chain), nrow = iter_bark, ncol = length(y))
+ is_wts <- as.numeric(unlist(weights))
+ wts_mean <- mean(exp(is_wts))
+ num <- is_samp*exp(is_wts)
+ sum_mat <- apply(num, 2, sum)
+ is_est <- sum_mat / sum(exp(is_wts))
+ input_mat <- cbind(num, exp(is_wts))  # input samples for mcse
+ Sigma_mat <- mcse.multi(input_mat)$cov  # estimated covariance matrix of the tuple
+ kappa_eta_mat <- cbind(diag(1/wts_mean, length(y)), is_est/wts_mean) # derivative of kappa matrix
+ 
+ asymp_covmat_is <- (kappa_eta_mat %*% Sigma_mat) %*% t(kappa_eta_mat) # IS asymptotic variance
+ 
+ asymp_covmat_pxbark <- mcse.multi(pxbark_chain)$cov   # PxMALA asymptotic variance
+ 
+ rel_ess <- (det(asymp_covmat_pxbark)/det(asymp_covmat_is))^(1/length(y))
+ 
+ ##  Posterior mean
+ 
+ weight_mat <- matrix(0, nrow = iter_bark, ncol = length(y))
+ for (i in 1:iter_bark) {
+   weight_mat[i,] <- bark_chain[i,]*exp(weights[i])
+ }
+ num_sum <- apply(weight_mat, 2, sum)
+ weights_sum <- sum(exp(weights))
+ post_mean <- num_sum/weights_sum
+ 
+ #  Quantile visualisation
+ 
+ augm_mat <- cbind(bark_chain,weights)
+ 
+ upper_quant <- numeric(length = length(y))
+ lower_quant <- numeric(length = length(y))
+ post_med <- numeric(length = length(y))
+ signif_level <- 0.025
+ 
+ for (i in 1:length(y)) 
+ {
+   initial_mat <- quant(i, augm_mat)
+   mat_sum <- apply(initial_mat, 2, sum)
+   wts_prop <- initial_mat[,2]/mat_sum[2]
+   final_mat <- cbind(initial_mat[1,], cumsum(wts_prop))
+   lower_index <- min(which(final_mat[,2] >= signif_level))
+   upper_index <- min(which(final_mat[,2] >= (1 - signif_level)))
+   med_index <- min(which(final_mat[,2] >= 0.5))
+   upper_quant[i] <- initial_mat[upper_index,1]
+   lower_quant[i] <- initial_mat[lower_index,1]
+   post_med[i] <- initial_mat[med_index,1]
+ }
+ 
+ acc_rate_is <- mybark[[3]]
+ acc_rate_pxb <- pxbark[[2]]
+ list(post_mean, post_med, asymp_covmat_is, asymp_covmat_pxbark, 
+      upper_quant, lower_quant, rel_ess, acc_rate_is, acc_rate_pxb)
+ }
5000 0.02563NULL
5000 0.02628NULL
5000 0.02702NULL
5000 0.02805NULL
5000 0.02673NULL
5000 0.02713NULL
5000 0.02623NULL
10000 0.05215NULL
10000 0.05744NULL
10000 0.05462NULL
10000 0.0568NULL
10000 0.05224NULL
10000 0.0534NULL
10000 0.05221NULL
15000 0.07699NULL
15000 0.08016NULL
15000 0.08465NULL
15000 0.08457NULL
15000 0.07846NULL
15000 0.08679NULL
15000 0.08129NULL
20000 0.10484NULL
20000 0.11222NULL
20000 0.10978NULL
20000 0.1159NULL
20000 0.10815NULL
20000 0.10464NULL
20000 0.10924NULL
25000 0.13359NULL
25000 0.14133NULL
25000 0.137NULL
25000 0.13197NULL
25000 0.13527NULL
25000 0.14351NULL
25000 0.13672NULL
30000 0.16294NULL
30000 0.16926NULL
30000 0.15976NULL
30000 0.16323NULL
30000 0.16421NULL
30000 0.16617NULL
30000 0.16945NULL
35000 0.19289NULL
35000 0.20014NULL
35000 0.19062NULL
35000 0.18671NULL
35000 0.19225NULL
35000 0.19206NULL
35000 0.19605NULL
40000 0.22122NULL
40000 0.23034NULL
40000 0.21936NULL
40000 0.21505NULL
40000 0.21952NULL
40000 0.21901NULL
40000 0.22197NULL
45000 0.24812NULL
45000 0.25997NULL
45000 0.24675NULL
45000 0.24316NULL
45000 0.24784NULL
45000 0.24693NULL
45000 0.24885NULL
50000 0.28912NULL
50000 0.27545NULL
50000 0.2749NULL
50000 0.27308NULL
50000 0.27126NULL
50000 0.27597NULL
50000 0.272NULL
55000 0.30337NULL
55000 0.31828NULL
55000 0.30287NULL
55000 0.29879NULL
55000 0.29757NULL
55000 0.30361NULL
55000 0.29738NULL
60000 0.34794NULL
60000 0.3303NULL
60000 0.32921NULL
60000 0.32582NULL
60000 0.33142NULL
60000 0.32443NULL
60000 0.32459NULL
65000 0.37375NULL
65000 0.35623NULL
65000 0.35498NULL
65000 0.35314NULL
65000 0.35171NULL
65000 0.36034NULL
65000 0.35237NULL
70000 0.3831NULL
70000 0.40065NULL
70000 0.3835NULL
70000 0.38109NULL
70000 0.38881NULL
70000 0.37829NULL
70000 0.37863NULL
75000 0.42882NULL
75000 0.41001NULL
75000 0.40987NULL
75000 0.40916NULL
75000 0.41657NULL
75000 0.40601NULL
75000 0.40662NULL
80000 0.45782NULL
80000 0.43761NULL
80000 0.43634NULL
80000 0.44652NULL
80000 0.43519NULL
80000 0.43157NULL
80000 0.43373NULL
85000 0.48588NULL
85000 0.4628NULL
85000 0.46411NULL
85000 0.47396NULL
85000 0.46499NULL
85000 0.45464NULL
85000 0.45982NULL
90000 0.51421NULL
90000 0.4895NULL
90000 0.49107NULL
90000 0.50057NULL
90000 0.49348NULL
90000 0.48258NULL
90000 0.48628NULL
95000 0.54297NULL
95000 0.51803NULL
95000 0.51923NULL
95000 0.52887NULL
95000 0.52275NULL
95000 0.509NULL
95000 0.51197NULL
100000 0.57214NULL
[1] 0.57214
100000 0.54398NULL
[1] 0.54398
100000 0.54535NULL
[1] 0.54535
100000 0.55751NULL
[1] 0.55751
100000 0.54958NULL
[1] 0.54958
100000 0.53542NULL
[1] 0.53542
100000 0.53602NULL
[1] 0.53602
5000 0.02734NULL
5000 0.02912NULL
5000 0.02941NULL
5000 0.02867NULL
5000 0.02766NULL
5000 0.03038NULL
5000 0.02647NULL
10000 0.05587NULL
10000 0.05825NULL
10000 0.05889NULL
10000 0.05941NULL
10000 0.05857NULL
10000 0.05906NULL
10000 0.05339NULL
15000 0.08627NULL
15000 0.08724NULL
15000 0.08683NULL
15000 0.09072NULL
15000 0.08887NULL
15000 0.08575NULL
15000 0.08039NULL
20000 0.11514NULL
20000 0.11523NULL
20000 0.11659NULL
20000 0.12033NULL
20000 0.11686NULL
20000 0.11141NULL
20000 0.10815NULL
25000 0.14317NULL
25000 0.14457NULL
25000 0.14581NULL
25000 0.15074NULL
25000 0.14602NULL
25000 0.13832NULL
25000 0.13698NULL
30000 0.17219NULL
30000 0.17493NULL
30000 0.17432NULL
30000 0.17904NULL
30000 0.17618NULL
30000 0.16604NULL
30000 0.16448NULL
35000 0.20051NULL
35000 0.2032NULL
35000 0.20479NULL
35000 0.20834NULL
35000 0.20611NULL
35000 0.19452NULL
35000 0.19278NULL
40000 0.22734NULL
40000 0.23292NULL
40000 0.23698NULL
40000 0.23335NULL
40000 0.22095NULL
40000 0.2328NULL
40000 0.22145NULL
45000 0.25738NULL
45000 0.24981NULL
45000 0.26085NULL
45000 0.26102NULL
45000 0.26002NULL
45000 0.26602NULL
45000 0.24875NULL
50000 0.28735NULL
50000 0.27883NULL
50000 0.28911NULL
50000 0.29136NULL
50000 0.29479NULL
50000 0.28838NULL
50000 0.27683NULL
55000 0.31799NULL
55000 0.3103NULL
55000 0.32286NULL
55000 0.31795NULL
55000 0.31729NULL
55000 0.32354NULL
55000 0.30557NULL
60000 0.34834NULL
60000 0.33928NULL
60000 0.35265NULL
60000 0.34663NULL
60000 0.34571NULL
60000 0.3491NULL
60000 0.33416NULL
65000 0.37843NULL
65000 0.36834NULL
65000 0.38283NULL
65000 0.37571NULL
65000 0.37648NULL
65000 0.37336NULL
65000 0.3617NULL
70000 0.40833NULL
70000 0.39723NULL
70000 0.41421NULL
70000 0.40119NULL
70000 0.40554NULL
70000 0.40149NULL
70000 0.38851NULL
75000 0.4382NULL
75000 0.42548NULL
75000 0.4449NULL
75000 0.43005NULL
75000 0.43369NULL
75000 0.43011NULL
75000 0.41629NULL
80000 0.4658NULL
80000 0.45387NULL
80000 0.47528NULL
80000 0.46104NULL
80000 0.45943NULL
80000 0.45951NULL
80000 0.44471NULL
85000 0.49218NULL
85000 0.48293NULL
85000 0.50384NULL
85000 0.48819NULL
85000 0.48782NULL
85000 0.48788NULL
85000 0.47282NULL
90000 0.52138NULL
90000 0.51175NULL
90000 0.53306NULL
90000 0.51774NULL
90000 0.51477NULL
90000 0.51693NULL
90000 0.50019NULL
95000 0.54983NULL
95000 0.5415NULL
95000 0.54649NULL
95000 0.56171NULL
95000 0.54301NULL
95000 0.548NULL
95000 0.52817NULL
100000 0.58045NULL
[1] 0.58045
100000 0.56897NULL
[1] 0.56897
100000 0.57593NULL
[1] 0.57593
100000 0.59333NULL
[1] 0.59333
100000 0.57173NULL
[1] 0.57173
100000 0.57683NULL
[1] 0.57683
100000 0.55684NULL
[1] 0.55684
> 
> save(output_bark, file = "output_bark.Rdata")
> 
> 
> proc.time()
    user   system  elapsed 
7818.040  103.878 1175.077 
