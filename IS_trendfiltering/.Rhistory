# Generate response variable
y <- X %*% theta_true + rnorm(n)
lambda <- 1
iter <- 500
mu <- 1.99/(max(eigen(X%*%t(X))$values) + 0.001)
theta_start <- c(7,5,3,9,1)
theta <- matrix(0, nrow = iter, ncol = length(theta_true))
S <- numeric(length = iter)
grad_fn <- function(mat, data, value)
{
grad = t(mat)%*%(mat%*%value - data)
return(grad)
}
prox_func <- function(u, lambda) {       ####  u is a vector
return(sign(u)*sapply(u, FUN=function(x) {max(abs(x)-lambda,0)}))
}
theta[1,] <- theta_start
for (i in 2:iter)
{
gradval <- grad_fn(X, y, theta[i-1,])
z <- prox_func(theta[i-1,] - mu*gradval, mu*lambda)
S1 <- max(max(abs(gradval)) - lambda, 0)
S2 <- abs(t(gradval)%*%theta[i-1,] - sum(abs(theta[i-1,])))
S[i-1] <- max(S1, S2)
theta[i,] <- z
}
iter_nos <- seq(1:iter)
plot(iter_nos, S, type = "l")
set.seed(123)
n <- 100  # Number of samples
p <- 5    # Number of features
# Generate predictors (features)
X <- matrix(rnorm(n * p), ncol = p)
# Generate true coefficients
theta_true <- c(3, 2, 1, 0, 0)
# Generate response variable
y <- X %*% theta_true + rnorm(n)
lambda <- 1
iter <- 50
mu <- 1.99/(max(eigen(X%*%t(X))$values) + 0.001)
theta_start <- c(7,5,3,9,1)
theta <- matrix(0, nrow = iter, ncol = length(theta_true))
S <- numeric(length = iter)
grad_fn <- function(mat, data, value)
{
grad = t(mat)%*%(mat%*%value - data)
return(grad)
}
prox_func <- function(u, lambda) {       ####  u is a vector
return(sign(u)*sapply(u, FUN=function(x) {max(abs(x)-lambda,0)}))
}
theta[1,] <- theta_start
for (i in 2:iter)
{
gradval <- grad_fn(X, y, theta[i-1,])
z <- prox_func(theta[i-1,] - mu*gradval, mu*lambda)
S1 <- max(max(abs(gradval)) - lambda, 0)
S2 <- abs(t(gradval)%*%theta[i-1,] - sum(abs(theta[i-1,])))
S[i-1] <- max(S1, S2)
theta[i,] <- z
}
iter_nos <- seq(1:iter)
plot(iter_nos, S, type = "l")
set.seed(123)
n <- 100  # Number of samples
p <- 5    # Number of features
# Generate predictors (features)
X <- matrix(rnorm(n * p), ncol = p)
# Generate true coefficients
theta_true <- c(3, 2, 1, 0, 0)
# Generate response variable
y <- X %*% theta_true + rnorm(n)
lambda <- 1
iter <- 50
mu <- 1.99/(max(eigen(X%*%t(X))$values) + 0.001)
theta_start <- c(7,5,3,9,1)
theta <- matrix(0, nrow = iter, ncol = length(theta_true))
S <- numeric(length = iter)
grad_fn <- function(mat, data, value)
{
grad = t(mat)%*%(mat%*%value - data)
return(grad)
}
prox_func <- function(u, lambda) {       ####  u is a vector
return(sign(u)*sapply(u, FUN=function(x) {max(abs(x)-lambda,0)}))
}
theta[1,] <- theta_start
for (i in 2:iter)
{
gradval <- grad_fn(X, y, theta[i-1,])
z <- prox_func(theta[i-1,] - mu*gradval, mu*lambda)
S1 <- max(max(abs(gradval)) - lambda, 0)
S2 <- abs(t(gradval)%*%theta[i-1,] - sum(abs(theta[i-1,])))
S[i-1] <- max(S1, S2)
theta[i,] <- z
}
iter_nos <- seq(1:iter)
plot(iter_nos, log(S), type = "l")
set.seed(123)
n <- 100  # Number of samples
p <- 5    # Number of features
# Generate predictors (features)
X <- matrix(rnorm(n * p), ncol = p)
# Generate true coefficients
theta_true <- c(3, 2, 1, 0, 0)
# Generate response variable
y <- X %*% theta_true + rnorm(n)
lambda <- 1
iter <- 500
mu <- 1.99/(max(eigen(X%*%t(X))$values) + 0.001)
theta_start <- c(7,5,3,9,1)
theta <- matrix(0, nrow = iter, ncol = length(theta_true))
S <- numeric(length = iter)
grad_fn <- function(mat, data, value)
{
grad = t(mat)%*%(mat%*%value - data)
return(grad)
}
prox_func <- function(u, lambda) {       ####  u is a vector
return(sign(u)*sapply(u, FUN=function(x) {max(abs(x)-lambda,0)}))
}
theta[1,] <- theta_start
for (i in 2:iter)
{
gradval <- grad_fn(X, y, theta[i-1,])
z <- prox_func(theta[i-1,] - mu*gradval, mu*lambda)
S1 <- max(max(abs(gradval)) - lambda, 0)
S2 <- abs(t(gradval)%*%theta[i-1,] - sum(abs(theta[i-1,])))
S[i-1] <- max(S1, S2)
theta[i,] <- z
}
iter_nos <- seq(1:iter)
plot(iter_nos, log(S), type = "l")
set.seed(123)
n <- 100  # Number of samples
p <- 5    # Number of features
# Generate predictors (features)
X <- matrix(rnorm(n * p), ncol = p)
# Generate true coefficients
theta_true <- c(3, 2, 1, 0, 0)
# Generate response variable
y <- X %*% theta_true + rnorm(n)
lambda <- 1
iter <- 500
mu <- 1.99/(max(eigen(X%*%t(X))$values) + 0.001)
theta_start <- c(7,5,3,9,1)
theta <- matrix(0, nrow = iter, ncol = length(theta_true))
S <- numeric(length = iter)
grad_fn <- function(mat, data, value)
{
grad = - t(mat)%*%(mat%*%value - data)
return(grad)
}
prox_func <- function(u, lambda) {       ####  u is a vector
return(sign(u)*sapply(u, FUN=function(x) {max(abs(x)-lambda,0)}))
}
theta[1,] <- theta_start
for (i in 2:iter)
{
gradval <- grad_fn(X, y, theta[i-1,])
z <- prox_func(theta[i-1,] - mu*gradval, mu*lambda)
S1 <- max(max(abs(gradval)) - lambda, 0)
S2 <- abs(t(gradval)%*%theta[i-1,] - sum(abs(theta[i-1,])))
S[i-1] <- max(S1, S2)
theta[i,] <- z
}
iter_nos <- seq(1:iter)
plot(iter_nos, log(S), type = "l")
View(x_tv_denoised)
set.seed(123)
n <- 100  # Number of samples
p <- 5    # Number of features
# Generate predictors (features)
X <- matrix(rnorm(n * p), ncol = p)
# Generate true coefficients
theta_true <- c(3, 2, 1, 0, 0)
# Generate response variable
y <- X %*% theta_true + rnorm(n)
lambda <- 1
iter <- 500
mu <- 1.99/(max(eigen(X%*%t(X))$values) + 0.001)
theta_start <- c(7,5,3,9,1)
theta <- matrix(0, nrow = iter, ncol = length(theta_true))
S <- numeric(length = iter)
grad_fn <- function(mat, data, value)
{
grad = t(mat)%*%(mat%*%value - data)
return(grad)
}
prox_func <- function(u, lambda) {       ####  u is a vector
return(sign(u)*sapply(u, FUN=function(x) {max(abs(x)-lambda,0)}))
}
theta[1,] <- theta_start
for (i in 2:iter)
{
gradval <- grad_fn(X, y, theta[i-1,])
z <- prox_func(theta[i-1,] - mu*gradval, mu*lambda)
S1 <- max(max(abs(gradval)) - lambda, 0)
S2 <- abs(-t(gradval)%*%theta[i-1,] - sum(abs(theta[i-1,])))
S[i-1] <- max(S1, S2)
theta[i,] <- z
}
iter_nos <- seq(1:iter)
plot(iter_nos, log(S), type = "l")
set.seed(123)
n <- 100  # Number of samples
p <- 5    # Number of features
# Generate predictors (features)
X <- matrix(rnorm(n * p), ncol = p)
# Generate true coefficients
theta_true <- c(3, 2, 1, 0, 0)
# Generate response variable
y <- X %*% theta_true + rnorm(n)
lambda <- 1
iter <- 500
mu <- 1.99/(max(eigen(X%*%t(X))$values) + 0.001)
theta_start <- c(7,5,3,9,1)
theta <- matrix(0, nrow = iter, ncol = length(theta_true))
S <- numeric(length = iter)
grad_fn <- function(mat, data, value)
{
grad = t(mat)%*%(mat%*%value - data)
return(grad)
}
prox_func <- function(u, lambda) {       ####  u is a vector
return(sign(u)*sapply(u, FUN=function(x) {max(abs(x)-lambda,0)}))
}
theta[1,] <- theta_start
for (i in 2:iter)
{
gradval <- grad_fn(X, y, theta[i-1,])
z <- prox_func(theta[i-1,] - mu*gradval, mu*lambda)
S1 <- max(max(abs(gradval)) - lambda, 0)
S2 <- abs(-t(gradval)%*%theta[i-1,] - sum(abs(theta[i-1,])))
S[i-1] <- max(S1, S2)
theta[i,] <- z
}
iter_nos <- seq(1:iter)
plot(iter_nos, S, type = "l")
S
set.seed(123)
n <- 100  # Number of samples
p <- 5    # Number of features
# Generate predictors (features)
X <- matrix(rnorm(n * p), ncol = p)
# Generate true coefficients
theta_true <- c(3, 2, 1, 0, 0)
# Generate response variable
y <- X %*% theta_true + rnorm(n)
lambda <- 1
iter <- 500
mu <- 1.99/(max(eigen(X%*%t(X))$values) + 0.001)
theta_start <- c(7,5,3,9,1)
theta <- matrix(0, nrow = iter, ncol = length(theta_true))
S <- numeric(length = iter)
grad_fn <- function(mat, data, value)
{
grad = t(mat)%*%(mat%*%value - data)
return(grad)
}
prox_func <- function(u, lambda) {       ####  u is a vector
return(sign(u)*sapply(u, FUN=function(x) {max(abs(x)-lambda,0)}))
}
theta[1,] <- theta_start
for (i in 2:iter)
{
gradval <- grad_fn(X, y, theta[i-1,])
z <- prox_func(theta[i-1,] - mu*gradval, mu*lambda)
S1 <- max(max(abs(gradval)) - lambda, 0)
S2 <- abs(-t(gradval)%*%theta[i-1,] - sum(abs(theta[i-1,])))
S[i-1] <- max(S1, S2)
theta[i,] <- z
}
iter_nos <- seq(1:iter)
plot(iter_nos, log(S), type = "l")
set.seed(123)
n <- 100  # Number of samples
p <- 5    # Number of features
# Generate predictors (features)
X <- matrix(rnorm(n * p), ncol = p)
# Generate true coefficients
theta_true <- c(3, 2, 1, 0, 0)
# Generate response variable
y <- X %*% theta_true + rnorm(n)
lambda <- 1
iter <- 500
mu <- 1.99/(max(eigen(X%*%t(X))$values) + 0.001)
theta_start <- c(7,5,3,9,1)
theta <- matrix(0, nrow = iter, ncol = length(theta_true))
S <- numeric(length = iter)
grad_fn <- function(mat, data, value)
{
grad = t(mat)%*%(mat%*%value - data)
return(grad)
}
prox_func <- function(u, lambda) {       ####  u is a vector
return(sign(u)*sapply(u, FUN=function(x) {max(abs(x)-lambda,0)}))
}
theta[1,] <- theta_start
for (i in 2:iter)
{
gradval <- grad_fn(X, y, theta[i-1,])
z <- prox_func(theta[i-1,] - mu*gradval, mu*lambda)
S1 <- max(max(abs(gradval)) - lambda, 0)
S2 <- abs(-t(gradval)%*%theta[i-1,] - sum(abs(theta[i-1,])))
S[i-1] <- max(S1, S2)
theta[i,] <- z
}
iter_nos <- seq(1:iter)
plot(iter_nos, S, type = "l")
load("~/Documents/GitHub/Proximal_IS/IS_nuclear_norm/output_nucl_norm3.Rdata")
output3[[1]]
setwd("~/Documents/GitHub/Proximal_IS/IS_nuclear_norm")
rm(list = ls())
source("nuclear_norm_functions.R")
load("output_dummy.Rdata")
load("output_nucl_norm.Rdata")
load("output_nucl_norm2.Rdata")
load("output_nucl_norm3.Rdata")
load("output_nucl_norm4.Rdata")
load("output_nucl_norm5.Rdata")
load("output_nucl_norm6.Rdata")
load("output_nucl_norm7.Rdata")
load("output_nucl_norm8.Rdata")
load("output_nucl_norm9.Rdata")
load("output_nucl_norm10.Rdata")
reps_each <- 10
avg_mar_eff_func <- function(output_list)
{
mar_eff_mala <- matrix(0, nrow = reps_each, ncol = 4096)
mar_eff_hmc <- matrix(0, nrow = reps_each, ncol = 4096)
for (i in 1:reps_each) {
mar_eff_mala[i,] <- output_list[[i]][2]/output_list[[i]][1]
mar_eff_hmc[i,] <- output_list[[i]][4]/output_list[[i]][3]
}
avg_rel_eff_mala <- apply(mar_eff_mala, 2, mean)
avg_rel_eff_hmc <- apply(mar_eff_hmc, 2, mean)
}
avg_mar_eff_func(output4)
avg_mar_eff_func <- function(output_list)
{
mar_eff_mala <- matrix(0, nrow = reps_each, ncol = 4096)
mar_eff_hmc <- matrix(0, nrow = reps_each, ncol = 4096)
for (i in 1:reps_each) {
mar_eff_mala[i,] <- as.numeric(unlist(output[[i]][2]))/as.numeric(unlist(output[[i]][1]))
mar_eff_hmc[i,] <- as.numeric(unlist(output[[i]][4]))/as.numeric(unlist(output[[i]][3]))
}
avg_rel_eff_mala <- apply(mar_eff_mala, 2, mean)
avg_rel_eff_hmc <- apply(mar_eff_hmc, 2, mean)
}
avg_mar_eff_func(output4)
avg_mar_eff_func <- function(output_list)
{
mar_eff_mala <- matrix(0, nrow = reps_each, ncol = 4096)
mar_eff_hmc <- matrix(0, nrow = reps_each, ncol = 4096)
for (i in 1:reps_each) {
mar_eff_mala[i,] <- as.numeric(unlist(output[[i]][2]))/as.numeric(unlist(output[[i]][1]))
mar_eff_hmc[i,] <- as.numeric(unlist(output[[i]][4]))/as.numeric(unlist(output[[i]][3]))
}
avg_rel_eff_mala <- apply(mar_eff_mala, 2, mean)
avg_rel_eff_hmc <- apply(mar_eff_hmc, 2, mean)
avg_eff_list <- list(avg_rel_eff_mala, avg_rel_eff_hmc)
return(avg_eff_list)
}
avg_mar_eff_func(output4)
avg_mar_eff_func(output4)[[2]] - avg_mar_eff_func(output5)[[2]]
avg_mar_eff_func(output4)[[2]] - avg_mar_eff_func(output7)[[2]]
d1 <- avg_mar_eff_func(output)
d2 <- avg_mar_eff_func(output2)
d3 <- avg_mar_eff_func(output3)
d4 <- avg_mar_eff_func(output4)
d5 <- avg_mar_eff_func(output5)
d6 <- avg_mar_eff_func(output6)
d7 <- avg_mar_eff_func(output7)
d8 <- avg_mar_eff_func(output8)
d9 <- avg_mar_eff_func(output9)
d10 <- avg_mar_eff_func(output10)
hist_data_mala <- rbind(d1[[1]], d2[[1]], d3[[1]], d4[[1]], d5[[1]], d6[[1]], d7[[1]],
d8[[1]], d9[[1]], d10[[1]])
hist_data_hmc <- rbind(d1[[2]], d2[[2]], d3[[2]], d4[[2]], d5[[2]], d6[[2]], d7[[2]],
d8[[2]], d9[[2]], d10[[2]])
freq_mala <- apply(hist_data_mala, 2, mean)
freq_hmc <- apply(hist_data_hmc, 2, mean)
pdf(file = "hist_nnorm.pdf", width = 6, height = 6)
par(mfrow = c(1,2))
hist(freq_mala, xlab = "Coordinate")
hist(freq_hmc, xlab = "Coordinate")
dev.off()
#############  Histogram
d1 <- avg_mar_eff_func(output)
d2 <- avg_mar_eff_func(output2)
d3 <- avg_mar_eff_func(output3)
d4 <- avg_mar_eff_func(output4)
d5 <- avg_mar_eff_func(output5)
d6 <- avg_mar_eff_func(output6)
d7 <- avg_mar_eff_func(output7)
d8 <- avg_mar_eff_func(output8)
d9 <- avg_mar_eff_func(output9)
d10 <- avg_mar_eff_func(output10)
hist_data_mala <- rbind(d1[[1]], d2[[1]], d3[[1]], d4[[1]], d5[[1]], d6[[1]], d7[[1]],
d8[[1]], d9[[1]], d10[[1]])
hist_data_hmc <- rbind(d1[[2]], d2[[2]], d3[[2]], d4[[2]], d5[[2]], d6[[2]], d7[[2]],
d8[[2]], d9[[2]], d10[[2]])
freq_mala <- apply(hist_data_mala, 2, mean)
freq_hmc <- apply(hist_data_hmc, 2, mean)
pdf(file = "hist_nnorm.pdf", width = 6, height = 6)
par(mfrow = c(1,2))
hist(freq_mala, breaks = 30, xlab = "Coordinate")
hist(freq_hmc, breaks = 30, xlab = "Coordinate")
dev.off()
#############  Histogram
d1 <- avg_mar_eff_func(output)
d2 <- avg_mar_eff_func(output2)
d3 <- avg_mar_eff_func(output3)
d4 <- avg_mar_eff_func(output4)
d5 <- avg_mar_eff_func(output5)
d6 <- avg_mar_eff_func(output6)
d7 <- avg_mar_eff_func(output7)
d8 <- avg_mar_eff_func(output8)
d9 <- avg_mar_eff_func(output9)
d10 <- avg_mar_eff_func(output10)
hist_data_mala <- rbind(d1[[1]], d2[[1]], d3[[1]], d4[[1]], d5[[1]], d6[[1]], d7[[1]],
d8[[1]], d9[[1]], d10[[1]])
hist_data_hmc <- rbind(d1[[2]], d2[[2]], d3[[2]], d4[[2]], d5[[2]], d6[[2]], d7[[2]],
d8[[2]], d9[[2]], d10[[2]])
freq_mala <- apply(hist_data_mala, 2, mean)
freq_hmc <- apply(hist_data_hmc, 2, mean)
pdf(file = "hist_nnorm.pdf", width = 6, height = 6)
par(mfrow = c(1,2))
hist(freq_mala, breaks = 30, xlab = "Coordinate", main = "MALA")
hist(freq_hmc, breaks = 30, xlab = "Coordinate", main = "HMC")
dev.off()
#############  Histogram
d1 <- avg_mar_eff_func(output)
d2 <- avg_mar_eff_func(output2)
d3 <- avg_mar_eff_func(output3)
d4 <- avg_mar_eff_func(output4)
d5 <- avg_mar_eff_func(output5)
d6 <- avg_mar_eff_func(output6)
d7 <- avg_mar_eff_func(output7)
d8 <- avg_mar_eff_func(output8)
d9 <- avg_mar_eff_func(output9)
d10 <- avg_mar_eff_func(output10)
hist_data_mala <- rbind(d1[[1]], d2[[1]], d3[[1]], d4[[1]], d5[[1]], d6[[1]], d7[[1]],
d8[[1]], d9[[1]], d10[[1]])
hist_data_hmc <- rbind(d1[[2]], d2[[2]], d3[[2]], d4[[2]], d5[[2]], d6[[2]], d7[[2]],
d8[[2]], d9[[2]], d10[[2]])
freq_mala <- apply(hist_data_mala, 2, mean)
freq_hmc <- apply(hist_data_hmc, 2, mean)
pdf(file = "hist_nnorm.pdf", width = 8, height = 6)
par(mfrow = c(1,2))
hist(freq_mala, breaks = 30, xlab = "Coordinate", main = "MALA")
hist(freq_hmc, breaks = 30, xlab = "Coordinate", main = "HMC")
dev.off()
setwd("~/Documents/GitHub/Proximal_IS/IS_trendfiltering")
################################################################################
################## Trendfiltering example output visualisation #################
################################################################################
rm(list = ls())
source("IS_trendf_functions_Pereyra.R")
load("output_mala.Rdata")
load("output_hmc.Rdata")
load("single_chain.Rdata")
load("single_chain_log_weights.Rdata")
avg_rel_eff_mala <- apply(rel_eff_mat_mala, 2, mean)
#### Marginal variance comparison for IS vs PxMALA
x <- c(1:100)
dim <- 100
margvar_ism <- matrix(0, nrow = 100, ncol = dim)
margvar_pxm <- matrix(0, nrow = 100, ncol = dim)
for (i in 1:100)
{
asympmat_ism <- matrix(unlist(output[[i]][[4]]), nrow = dim, ncol = dim, byrow = T)
asympmat_pxm <- matrix(unlist(output[[i]][[5]]), nrow = dim, ncol = dim, byrow = T)
for (j in 1:dim)
{
margvar_ism[i,j] <- asympmat_ism[j,j]
margvar_pxm[i,j] <- asympmat_pxm[j,j]
}
}
rel_eff_mat_mala <- margvar_pxm/margvar_ism
#### Marginal variance comparison for IS vs PxHMC
dim <- 100
margvar_ish <- matrix(0, nrow = 100, ncol = dim)
margvar_pxh <- matrix(0, nrow = 100, ncol = dim)
for (i in 1:100)
{
asympmat_ish <- matrix(unlist(output_hmc[[i]][4]), nrow = dim, ncol = dim, byrow = T)
asympmat_pxh <- matrix(unlist(output_hmc[[i]][5]), nrow = dim, ncol = dim, byrow = T)
for (j in 1:dim)
{
margvar_ish[i,j] <- asympmat_ish[j,j]
margvar_pxh[i,j] <- asympmat_pxh[j,j]
}
}
rel_eff_mat_hmc <- margvar_pxh/margvar_ish
avg_rel_eff_mala <- apply(rel_eff_mat_mala, 2, mean)
avg_rel_eff_hmc <- apply(rel_eff_mat_hmc, 2, mean)
pdf(file = "hist_tf.pdf", width = 8, height = 6)
parm(mfrow = c(1,2))
avg_rel_eff_mala <- apply(rel_eff_mat_mala, 2, mean)
avg_rel_eff_hmc <- apply(rel_eff_mat_hmc, 2, mean)
pdf(file = "hist_tf.pdf", width = 8, height = 6)
par(mfrow = c(1,2))
hit(avg_rel_eff_mala, breaks = 30, main = "MALA")
avg_rel_eff_mala <- apply(rel_eff_mat_mala, 2, mean)
avg_rel_eff_hmc <- apply(rel_eff_mat_hmc, 2, mean)
pdf(file = "hist_tf.pdf", width = 8, height = 6)
par(mfrow = c(1,2))
hist(avg_rel_eff_mala, breaks = 30, main = "MALA")
hist(avg_rel_eff_hmc, breaks = 30, main = "HMC")
dev.off()
