for (i in 2:iter)
{
gradval <- grad_fn(X, y, theta[i-1,])
z <- prox_func(theta[i-1,] - mu*gradval, mu*lambda)
S1 <- max(max(abs(gradval)) - lambda, 0)
S2 <- abs(t(gradval)%*%theta[i-1,] - sum(abs(theta[i-1,])))
S[i-1] <- max(S1, S2)
theta[i,] <- z
}
iter_nos <- seq(1:iter)
plot(iter_nos, log(S), type = "l")
set.seed(123)
n <- 100  # Number of samples
p <- 5    # Number of features
# Generate predictors (features)
X <- matrix(rnorm(n * p), ncol = p)
# Generate true coefficients
theta_true <- c(3, 2, 1, 0, 0)
# Generate response variable
y <- X %*% theta_true + rnorm(n)
lambda <- 1
iter <- 500
mu <- 1.99/(max(eigen(X%*%t(X))$values) + 0.001)
theta_start <- c(7,5,3,9,1)
theta <- matrix(0, nrow = iter, ncol = length(theta_true))
S <- numeric(length = iter)
grad_fn <- function(mat, data, value)
{
grad = t(mat)%*%(mat%*%value - data)
return(grad)
}
prox_func <- function(u, lambda) {       ####  u is a vector
return(sign(u)*sapply(u, FUN=function(x) {max(abs(x)-lambda,0)}))
}
theta[1,] <- theta_start
for (i in 2:iter)
{
gradval <- grad_fn(X, y, theta[i-1,])
z <- prox_func(theta[i-1,] - mu*gradval, mu*lambda)
S1 <- max(max(abs(gradval)) - lambda, 0)
S2 <- abs(t(gradval)%*%theta[i-1,] - sum(abs(theta[i-1,])))
S[i-1] <- max(S1, S2)
theta[i,] <- z
}
iter_nos <- seq(1:iter)
plot(iter_nos, log(S), type = "l")
set.seed(123)
n <- 100  # Number of samples
p <- 5    # Number of features
# Generate predictors (features)
X <- matrix(rnorm(n * p), ncol = p)
# Generate true coefficients
theta_true <- c(3, 2, 1, 0, 0)
# Generate response variable
y <- X %*% theta_true + rnorm(n)
lambda <- 1
iter <- 500
mu <- 1.99/(max(eigen(X%*%t(X))$values) + 0.001)
theta_start <- c(7,5,3,9,1)
theta <- matrix(0, nrow = iter, ncol = length(theta_true))
S <- numeric(length = iter)
grad_fn <- function(mat, data, value)
{
grad = - t(mat)%*%(mat%*%value - data)
return(grad)
}
prox_func <- function(u, lambda) {       ####  u is a vector
return(sign(u)*sapply(u, FUN=function(x) {max(abs(x)-lambda,0)}))
}
theta[1,] <- theta_start
for (i in 2:iter)
{
gradval <- grad_fn(X, y, theta[i-1,])
z <- prox_func(theta[i-1,] - mu*gradval, mu*lambda)
S1 <- max(max(abs(gradval)) - lambda, 0)
S2 <- abs(t(gradval)%*%theta[i-1,] - sum(abs(theta[i-1,])))
S[i-1] <- max(S1, S2)
theta[i,] <- z
}
iter_nos <- seq(1:iter)
plot(iter_nos, log(S), type = "l")
View(x_tv_denoised)
set.seed(123)
n <- 100  # Number of samples
p <- 5    # Number of features
# Generate predictors (features)
X <- matrix(rnorm(n * p), ncol = p)
# Generate true coefficients
theta_true <- c(3, 2, 1, 0, 0)
# Generate response variable
y <- X %*% theta_true + rnorm(n)
lambda <- 1
iter <- 500
mu <- 1.99/(max(eigen(X%*%t(X))$values) + 0.001)
theta_start <- c(7,5,3,9,1)
theta <- matrix(0, nrow = iter, ncol = length(theta_true))
S <- numeric(length = iter)
grad_fn <- function(mat, data, value)
{
grad = t(mat)%*%(mat%*%value - data)
return(grad)
}
prox_func <- function(u, lambda) {       ####  u is a vector
return(sign(u)*sapply(u, FUN=function(x) {max(abs(x)-lambda,0)}))
}
theta[1,] <- theta_start
for (i in 2:iter)
{
gradval <- grad_fn(X, y, theta[i-1,])
z <- prox_func(theta[i-1,] - mu*gradval, mu*lambda)
S1 <- max(max(abs(gradval)) - lambda, 0)
S2 <- abs(-t(gradval)%*%theta[i-1,] - sum(abs(theta[i-1,])))
S[i-1] <- max(S1, S2)
theta[i,] <- z
}
iter_nos <- seq(1:iter)
plot(iter_nos, log(S), type = "l")
set.seed(123)
n <- 100  # Number of samples
p <- 5    # Number of features
# Generate predictors (features)
X <- matrix(rnorm(n * p), ncol = p)
# Generate true coefficients
theta_true <- c(3, 2, 1, 0, 0)
# Generate response variable
y <- X %*% theta_true + rnorm(n)
lambda <- 1
iter <- 500
mu <- 1.99/(max(eigen(X%*%t(X))$values) + 0.001)
theta_start <- c(7,5,3,9,1)
theta <- matrix(0, nrow = iter, ncol = length(theta_true))
S <- numeric(length = iter)
grad_fn <- function(mat, data, value)
{
grad = t(mat)%*%(mat%*%value - data)
return(grad)
}
prox_func <- function(u, lambda) {       ####  u is a vector
return(sign(u)*sapply(u, FUN=function(x) {max(abs(x)-lambda,0)}))
}
theta[1,] <- theta_start
for (i in 2:iter)
{
gradval <- grad_fn(X, y, theta[i-1,])
z <- prox_func(theta[i-1,] - mu*gradval, mu*lambda)
S1 <- max(max(abs(gradval)) - lambda, 0)
S2 <- abs(-t(gradval)%*%theta[i-1,] - sum(abs(theta[i-1,])))
S[i-1] <- max(S1, S2)
theta[i,] <- z
}
iter_nos <- seq(1:iter)
plot(iter_nos, S, type = "l")
S
set.seed(123)
n <- 100  # Number of samples
p <- 5    # Number of features
# Generate predictors (features)
X <- matrix(rnorm(n * p), ncol = p)
# Generate true coefficients
theta_true <- c(3, 2, 1, 0, 0)
# Generate response variable
y <- X %*% theta_true + rnorm(n)
lambda <- 1
iter <- 500
mu <- 1.99/(max(eigen(X%*%t(X))$values) + 0.001)
theta_start <- c(7,5,3,9,1)
theta <- matrix(0, nrow = iter, ncol = length(theta_true))
S <- numeric(length = iter)
grad_fn <- function(mat, data, value)
{
grad = t(mat)%*%(mat%*%value - data)
return(grad)
}
prox_func <- function(u, lambda) {       ####  u is a vector
return(sign(u)*sapply(u, FUN=function(x) {max(abs(x)-lambda,0)}))
}
theta[1,] <- theta_start
for (i in 2:iter)
{
gradval <- grad_fn(X, y, theta[i-1,])
z <- prox_func(theta[i-1,] - mu*gradval, mu*lambda)
S1 <- max(max(abs(gradval)) - lambda, 0)
S2 <- abs(-t(gradval)%*%theta[i-1,] - sum(abs(theta[i-1,])))
S[i-1] <- max(S1, S2)
theta[i,] <- z
}
iter_nos <- seq(1:iter)
plot(iter_nos, log(S), type = "l")
set.seed(123)
n <- 100  # Number of samples
p <- 5    # Number of features
# Generate predictors (features)
X <- matrix(rnorm(n * p), ncol = p)
# Generate true coefficients
theta_true <- c(3, 2, 1, 0, 0)
# Generate response variable
y <- X %*% theta_true + rnorm(n)
lambda <- 1
iter <- 500
mu <- 1.99/(max(eigen(X%*%t(X))$values) + 0.001)
theta_start <- c(7,5,3,9,1)
theta <- matrix(0, nrow = iter, ncol = length(theta_true))
S <- numeric(length = iter)
grad_fn <- function(mat, data, value)
{
grad = t(mat)%*%(mat%*%value - data)
return(grad)
}
prox_func <- function(u, lambda) {       ####  u is a vector
return(sign(u)*sapply(u, FUN=function(x) {max(abs(x)-lambda,0)}))
}
theta[1,] <- theta_start
for (i in 2:iter)
{
gradval <- grad_fn(X, y, theta[i-1,])
z <- prox_func(theta[i-1,] - mu*gradval, mu*lambda)
S1 <- max(max(abs(gradval)) - lambda, 0)
S2 <- abs(-t(gradval)%*%theta[i-1,] - sum(abs(theta[i-1,])))
S[i-1] <- max(S1, S2)
theta[i,] <- z
}
iter_nos <- seq(1:iter)
plot(iter_nos, S, type = "l")
source("nuclear_norm_functions.R")
setwd("~/Documents/GitHub/Proximal_IS/Laplace")
#####################################################################
################## Laplace output #######################
#####################################################################
set.seed(100)
source("laplace_functions.R")
library(mcmcse)
library(foreach)
library(doParallel)
num_cores <- 4
doParallel::registerDoParallel(cores = num_cores)
iter <- 1e4
reps <- 50
lamb_d4 <- seq(1e-2, 7, length = reps)
delta_is_d4 <- seq(1.2, 12, length = length(lamb_d5))
#####################################################################
################## Laplace output #######################
#####################################################################
set.seed(100)
source("laplace_functions.R")
library(mcmcse)
library(foreach)
library(doParallel)
num_cores <- 4
doParallel::registerDoParallel(cores = num_cores)
iter <- 1e4
reps <- 50
lamb_d4 <- seq(1e-2, 7, length = reps)
delta_is_d4 <- seq(1.2, 12, length = length(lamb_d4))
delta_px_d4 <- seq(1.2, 0.6, length = length(lamb_d4))
output_laplace_d4 <- list()
output_laplace_d4 <- foreach(lam_ani = 1:length(lamb_d4)) %dopar%{
output_mala_d4 <- dimen_func(d = 1, lambda = lamb_d4[lam_ani], iter = iter,
delta_is_d4[lam_ani], delta_px_d4[lam_ani])
asymp_cov_ism_d4 <- asymp_covmat_fn(output_mala_d4[[1]][[1]], exp(output_mala_d4[[1]][[2]]))
asymp_ess_pilam_d4 <- ess(output_mala_d4[[1]][[1]], r = 1)
asymp_cov_pxm_d4 <- mcse.multi(output_mala_d4[[2]], r = 1)$cov
asymp_margvar_is4 <- diag(asymp_cov_ism_d4)   ### marginal variance ismala
# asymp_margvar_pilam1 <- diag(asymp_cov_pilam_d4)   ### marginal variance of is for pilambda
rel_eff_4 <- diag(asymp_cov_pxm_d4)/ asymp_margvar_is4  ### relative efficiency wrt pi
wts <- exp(output_mala_d4[[1]][[2]])
ess_ism_d4 <- (mean(wts)^2)/mean(wts^2)
list(asymp_margvar_is1, asymp_ess_pilam_d4/iter, rel_eff_4, ess_ism_d4)
}
#####################################################################
################## Laplace output #######################
#####################################################################
set.seed(100)
source("laplace_functions.R")
library(mcmcse)
library(foreach)
library(doParallel)
num_cores <- 4
doParallel::registerDoParallel(cores = num_cores)
iter <- 1e4
reps <- 50
lamb_d4 <- seq(1e-2, 7, length = reps)
delta_is_d4 <- seq(1.2, 12, length = length(lamb_d4))
delta_px_d4 <- seq(1.2, 0.6, length = length(lamb_d4))
output_laplace_d4 <- list()
output_laplace_d4 <- foreach(lam_ani = 1:length(lamb_d4)) %dopar%{
output_mala_d4 <- dimen_func(d = 4, lambda = lamb_d4[lam_ani], iter = iter,
delta_is_d4[lam_ani], delta_px_d4[lam_ani])
asymp_cov_ism_d4 <- asymp_covmat_fn(output_mala_d4[[1]][[1]], exp(output_mala_d4[[1]][[2]]))
asymp_ess_pilam_d4 <- ess(output_mala_d4[[1]][[1]], r = 1)
asymp_cov_pxm_d4 <- mcse.multi(output_mala_d4[[2]], r = 1)$cov
asymp_margvar_is4 <- diag(asymp_cov_ism_d4)   ### marginal variance ismala
# asymp_margvar_pilam1 <- diag(asymp_cov_pilam_d4)   ### marginal variance of is for pilambda
rel_eff_4 <- diag(asymp_cov_pxm_d4)/ asymp_margvar_is4  ### relative efficiency wrt pi
wts <- exp(output_mala_d4[[1]][[2]])
ess_ism_d4 <- (mean(wts)^2)/mean(wts^2)
list(asymp_margvar_is1, asymp_ess_pilam_d4/iter, rel_eff_4, ess_ism_d4)
}
#####################################################################
################## Laplace output #######################
#####################################################################
set.seed(100)
source("laplace_functions.R")
library(mcmcse)
library(foreach)
library(doParallel)
num_cores <- 4
doParallel::registerDoParallel(cores = num_cores)
iter <- 1e4
reps <- 50
lamb_d4 <- seq(1e-2, 7, length = reps)
delta_is_d4 <- seq(1.2, 12, length = length(lamb_d4))
delta_px_d4 <- seq(1.2, 0.6, length = length(lamb_d4))
output_laplace_d4 <- list()
output_laplace_d4 <- foreach(lam_ani = 1:length(lamb_d4)) %dopar%{
output_mala_d4 <- dimen_func(d = 4, lambda = lamb_d4[lam_ani], iter = iter,
delta_is_d4[lam_ani], delta_px_d4[lam_ani])
asymp_cov_ism_d4 <- asymp_covmat_fn(output_mala_d4[[1]][[1]], exp(output_mala_d4[[1]][[2]]))
asymp_ess_pilam_d4 <- ess(output_mala_d4[[1]][[1]], r = 1)
asymp_cov_pxm_d4 <- mcse.multi(output_mala_d4[[2]], r = 1)$cov
asymp_margvar_is4 <- diag(asymp_cov_ism_d4)   ### marginal variance ismala
# asymp_margvar_pilam1 <- diag(asymp_cov_pilam_d4)   ### marginal variance of is for pilambda
rel_eff_4 <- diag(asymp_cov_pxm_d4)/ asymp_margvar_is4  ### relative efficiency wrt pi
wts <- exp(output_mala_d4[[1]][[2]])
ess_ism_d4 <- (mean(wts)^2)/mean(wts^2)
list(asymp_margvar_is4, asymp_ess_pilam_d4/iter, rel_eff_4, ess_ism_d4)
}
save(output_laplace_d4, file = "output_d4.Rdata")
load("~/Documents/GitHub/Proximal_IS/Laplace/output_d4.Rdata")
output_laplace_d4[[1]]
output_laplace_d4[[50]]
plot(lamb_d4, output_laplace_d4[[]][[4]], type = 'l')
output_laplace_d4[[]][[4]]
plot(lamb_d4, output_laplace_d4[[c(1:50)]][[4]], type = 'l')
c <- numeric(length = 50)
for (i in 1:50) {
c[i] <- output_laplace_d4[[i]][[4]]
}
plot(lamb_d4, c, type = 'l')
d <- 4
beta <- rep(1, d)
start <- rep(0.5, d)
mym.output <- mymala(beta, start, 1e-2, 1e4, 1.2)
mym.output <- mymala(beta, start, 1e-2, 1e4, 1.4)
mym.output <- mymala(beta, start, 1e-2, 1e4, 1.4)
mym.output <- mymala(beta, start, 1e-2, 1e4, 1.4)
mym.output <- mymala(beta, start, 1e-2, 1e4, 1.4)
mym.output <- mymala(beta, start, 1e-2, 1e4, 1.4)
pxm.output <- pxmala(beta, start, 1e-2, iter, 12)
pxm.output <- mymala(beta, start, 1e-2, iter, 12)
pxm.output <- mymala(beta, start, 8, iter, 12)
pxm.output <- mymala(beta, start, 8, iter, 15)
pxm.output <- mymala(beta, start, 8, iter, 15)
pxm.output <- mymala(beta, start, 8, iter, 15)
pxm.output <- mymala(beta, start, 8, iter, 15)
pxm.output <- pxmala(beta, start, 1e-2, 1e4, 1.4)
pxm.output <- pxmala(beta, start, 1e-2, 1e4, 1.4)
pxm.output <- pxmala(beta, start, 1e-2, 1e4, 1.4)
pxm.output <- pxmala(beta, start, 1e-2, 1e4, 1.4)
pxm.output <- pxmala(beta, start, 8, 1e4, .4)
pxm.output <- pxmala(beta, start, 8, 1e4, .6)
pxm.output <- pxmala(beta, start, 8, 1e4, .6)
pxm.output <- pxmala(beta, start, 8, 1e4, .8)
pxm.output <- pxmala(beta, start, 8, 1e4, .8)
pxm.output <- pxmala(beta, start, 8, 1e4, .8)
pxm.output <- pxmala(beta, start, 8, 1e4, .75)
pxm.output <- pxmala(beta, start, 8, 1e4, .75)
pxm.output <- pxmala(beta, start, 8, 1e4, .7)
pxm.output <- pxmala(beta, start, 8, 1e4, .7)
pxm.output <- pxmala(beta, start, 8, 1e4, .7)
pxm.output <- pxmala(beta, start, 8, 1e4, .7)
#####################################################################
################## Laplace output #######################
#####################################################################
set.seed(100)
source("laplace_functions.R")
library(mcmcse)
library(foreach)
library(doParallel)
num_cores <- 4
doParallel::registerDoParallel(cores = num_cores)
iter <- 1e4
reps <- 50
lamb_d4 <- seq(1e-2, 8, length = reps)
delta_is_d4 <- seq(1.4, 15, length = length(lamb_d4))
delta_px_d4 <- seq(1.4, 0.7, length = length(lamb_d4))
output_laplace_d4 <- list()
output_laplace_d4 <- foreach(lam_ani = 1:length(lamb_d4)) %dopar%{
output_mala_d4 <- dimen_func(d = 4, lambda = lamb_d4[lam_ani], iter = iter,
delta_is_d4[lam_ani], delta_px_d4[lam_ani])
asymp_cov_ism_d4 <- asymp_covmat_fn(output_mala_d4[[1]][[1]], exp(output_mala_d4[[1]][[2]]))
asymp_ess_pilam_d4 <- ess(output_mala_d4[[1]][[1]], r = 1)
asymp_cov_pxm_d4 <- mcse.multi(output_mala_d4[[2]], r = 1)$cov
asymp_margvar_is4 <- diag(asymp_cov_ism_d4)   ### marginal variance ismala
# asymp_margvar_pilam1 <- diag(asymp_cov_pilam_d4)   ### marginal variance of is for pilambda
rel_eff_4 <- diag(asymp_cov_pxm_d4)/ asymp_margvar_is4  ### relative efficiency wrt pi
wts <- exp(output_mala_d4[[1]][[2]])
ess_ism_d4 <- (mean(wts)^2)/mean(wts^2)
list(asymp_margvar_is4, asymp_ess_pilam_d4/iter, rel_eff_4, ess_ism_d4)
}
save(output_laplace_d4, file = "output_d4.Rdata")
load("output_d4.Rdata")
c <- numeric(length = 50)
for (i in 1:50) {
c[i] <- output_laplace_d4[[i]][[4]]
}
plot(lamb_d4, c, type = 'l')
setwd("~/Documents/GitHub/Proximal_IS/Laplace")
# load("output_lap_laplace.Rdata")
reps <- 50
cutoff <- c(0.4,0.8)
lamb_d4 <- seq(1e-2, 8, length = reps)
##########################  For d = 1  ##########################
load("output_d4.Rdata")
ess_d4 <- sapply(output_laplace_d4, function(l) l[[4]])
pilam_var_d4 <- sapply(output_laplace_d4, function(l) l[[2]])
is_var_d4 <- sapply(output_laplace_d4, function(l) l[[1]])
opt_win <- c(max(lamb_d4[which(ess_d4 >= cutoff[1])]), min(lamb_d4[which(ess_d4 <= cutoff[2])]))
pdf(file = "plots/lap_plot_d4.pdf", height = 4, width = 12)
par(mfrow = c(1,3))
plot(lamb_d4, ess_d4, type = 'l', xlab = expression(lambda), ylab = expression(n[e]/n))
# lines(abline(h=cutoff, col=c("blue", "blue"), lty=c(2,2), lwd=c(1, 1)))
lines(abline(v=opt_win, col=c("blue", "blue"), lty=c(2,2), lwd=c(1, 1)))
plot(lamb_d4, pilam_var_d4, type = 'l', xlab = "lambda",
ylab = expression(paste("MCMC ESS under ",pi^lambda)))
plot(lamb_d4, is_var_d4, type = 'l', xlab = "lambda",
ylab ="Importance Sampling Asymptotic variance")
lines(abline(v=opt_win, col=c("blue", "blue"), lty=c(2,2), lwd=c(1, 1)))
plot(lamb_d4, ess_d4, type = 'l', xlab = expression(lambda), ylab = expression(n[e]/n))
# lines(abline(h=cutoff, col=c("blue", "blue"), lty=c(2,2), lwd=c(1, 1)))
lines(abline(v=opt_win, col=c("blue", "blue"), lty=c(2,2), lwd=c(1, 1)))
plot(lamb_d4, ess_d4, type = 'l', xlab = expression(lambda), ylab = expression(n[e]/n))
# lines(abline(h=cutoff, col=c("blue", "blue"), lty=c(2,2), lwd=c(1, 1)))
lines(abline(v=opt_win, col=c("blue", "blue"), lty=c(2,2), lwd=c(1, 1)))
# load("output_lap_laplace.Rdata")
reps <- 50
cutoff <- c(0.4,0.8)
lamb_d4 <- seq(1e-2, 8, length = reps)
##########################  For d = 1  ##########################
load("output_d4.Rdata")
ess_d4 <- sapply(output_laplace_d4, function(l) l[[4]])
pilam_var_d4 <- sapply(output_laplace_d4, function(l) l[[2]])
is_var_d4 <- sapply(output_laplace_d4, function(l) l[[1]])
opt_win <- c(max(lamb_d4[which(ess_d4 >= cutoff[1])]), min(lamb_d4[which(ess_d4 <= cutoff[2])]))
pdf(file = "plots/lap_plot_d4.pdf", height = 4, width = 12)
par(mfrow = c(1,3))
plot(lamb_d4, ess_d4, type = 'l', xlab = expression(lambda), ylab = expression(n[e]/n))
# lines(abline(h=cutoff, col=c("blue", "blue"), lty=c(2,2), lwd=c(1, 1)))
lines(abline(v=opt_win, col=c("blue", "blue"), lty=c(2,2), lwd=c(1, 1)))
plot(lamb_d4, pilam_var_d4, type = 'l', xlab = "lambda",
ylab = expression(paste("MCMC ESS under ",pi^lambda)))
pilam_var_d4
ess_d4
output_laplace_d4[[30]][[3]]
# load("output_lap_laplace.Rdata")
reps <- 50
cutoff <- c(0.4,0.8)
lamb_d4 <- seq(1e-2, 8, length = reps)
##########################  For d = 1  ##########################
load("output_d4.Rdata")
ess_d4 <- sapply(output_laplace_d4, function(l) l[[4]])
pilam_var_d4 <- colMeans(sapply(output_laplace_d4, function(l) l[[2]]))
is_var_d4 <- colMeans(sapply(output_laplace_d4, function(l) l[[1]]))
opt_win <- c(max(lamb_d4[which(ess_d4 >= cutoff[1])]), min(lamb_d4[which(ess_d4 <= cutoff[2])]))
pdf(file = "plots/lap_plot_d4.pdf", height = 4, width = 12)
par(mfrow = c(1,3))
plot(lamb_d4, ess_d4, type = 'l', xlab = expression(lambda), ylab = expression(n[e]/n))
# lines(abline(h=cutoff, col=c("blue", "blue"), lty=c(2,2), lwd=c(1, 1)))
lines(abline(v=opt_win, col=c("blue", "blue"), lty=c(2,2), lwd=c(1, 1)))
plot(lamb_d4, pilam_var_d4, type = 'l', xlab = expression(lambda),
ylab = expression(paste("MCMC ESS under ",pi^lambda)))
# lines(abline(v=opt_win, col=c("blue", "blue"), lty=c(2,2), lwd=c(1, 1)))
plot(lamb_d4, is_var_d4, type = 'l', xlab = expression(lambda),
ylab ="Importance Sampling Asymptotic variance")
lines(abline(v=opt_win, col=c("blue", "blue"), lty=c(2,2), lwd=c(1, 1)))
dev.off()
library(mcmcse)
source("Toy_exp_functions.R")
setwd("~/Documents/GitHub/Proximal_IS/Toy_examples")
library(mcmcse)
source("Toy_exp_functions.R")
iter <- 1e4
curr_val <- 1
mym.output <- mymala(curr_val,iter, 1e-2, 1.4)
mymala(curr_val,iter, 1e-2, 1.4)
source("Toy_exp_functions.R")
source("Toy_exp_functions.R")
mymala(curr_val,iter, 1e-2, 1.4)
mym.output <- mymala(curr_val,iter, 1e-2, 1.4)
library(mcmcse)
source("Toy_exp_functions.R")
iter <- 1e4
curr_val <- 1
mym.output <- mymala(curr_val,iter, 1e-2, 1.4)
mym.output <- mymala(curr_val,iter, 1e-2, .04)
mym.output <- mymala(curr_val,iter, 1e-2, .0004)
mym.output <- mymala(curr_val,iter, 1e-2, .00000004)
mym.output <- mymala(curr_val,iter, 1e-2, 4)
library(mcmcse)
source("Toy_exp_functions.R")
iter <- 1e4
curr_val <- 1
mym.output <- mymala(curr_val,iter, 1e-2, 4)
mym.output <- mymala(curr_val,iter, 1e-2, 1.2)
plot(density(mym.output[[1]]))
plot(density(mym.output[[1]]), type = 'l')
library(mcmcse)
source("Toy_exp_functions.R")
iter <- 1e4
curr_val <- 1
mym.output <- mymala(curr_val,iter,1e-2, 1.2)
plot(density(mym.output)[[1]], type = 'l')
plot(density(mym.output[[1]]), type = 'l')
